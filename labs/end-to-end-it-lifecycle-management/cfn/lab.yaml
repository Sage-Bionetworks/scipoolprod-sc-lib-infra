AWSTemplateFormatVersion: '2010-09-09'
Description: ' This cloudformation template creates resources for the re:inforce workshop.(fdp-1o32smpoh)'
Parameters:
  PWD:
    Description: Password for internal SNOW users
    Type: String
    Default: NevaChang3
  ProductVersionName:
    Type: String
    Description: The product version name in the service catalog
Mappings:
  AMI:
    us-east-1:
      HVM64: ami-0922553b7b0369273
    eu-west-1:
      HVM64: ami-0c21ae4a3bd190229
    ap-southeast-1:
      HVM64: ami-0fca02518e0faeb84
    ca-central-1:
      HVM64: ami-0bf6ee3cf1ee25853
  SubnetAZ1:
    us-east-1:
      HVM64: us-east-1b
    ca-central-1:
      HVM64: ca-central-1a
    eu-west-1:
      HVM64: eu-west-1a
    ap-southeast-1:
      HVM64: ap-southeast-1a
  SubnetAZ2:
    us-east-1:
      HVM64: us-east-1d
    ca-central-1:
      HVM64: ca-central-1b
    eu-west-1:
      HVM64: eu-west-1b
    ap-southeast-1:
      HVM64: ap-southeast-1b
  RegionValue:
    us-east-1:
      name: N. Virginia
    eu-west-1:
      name: Ireland
    ap-southeast-1:
      name: Singapore
    ca-central-1:
      name: Canada
Resources:
  T2MicroConfigRuleTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: T2MicroConfigRuleTopic
      DisplayName: T2MicroConfigRuleTopic
  T2MicroConfigRuleTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: T2MicroConfigRuleTopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: My-statement-id
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref 'T2MicroConfigRuleTopic'
      Topics:
        - !Ref 'T2MicroConfigRuleTopic'
  ScheduledRule:
    Type: AWS::Events::Rule
    DependsOn: T2MicroConfigRuleTopic
    Properties:
      Description: T2MicroConfigRuleComplianceChangeNotification Event Rule
      Name: T2MicroConfigRuleComplianceChangeNotification
      EventPattern:
        source:
          - aws.config
        detail-type:
          - Config Rules Compliance Change
        detail:
          messageType:
            - ComplianceChangeNotification
          configRuleName:
            - ConfigRuleForCheckIfInstanceIsNotOfTypeT2MicroVerification
      State: ENABLED
      Targets:
        - Arn: !Ref 'T2MicroConfigRuleTopic'
          Id: T2MicroConfigRuleTopicTopic
  Portfolio:
    Type: AWS::ServiceCatalog::Portfolio
    Properties:
      AcceptLanguage: en
      Description: SNOW-SC Test Portfolio.
      DisplayName: SNOW-SC Test Portfolio
      ProviderName: CCOE
  EndUserPortfolioPrincipalAssociation:
    Type: AWS::ServiceCatalog::PortfolioPrincipalAssociation
    Properties:
      AcceptLanguage: en
      PortfolioId: !Ref 'Portfolio'
      PrincipalARN: !GetAtt 'EndUser.Arn'
      PrincipalType: IAM
  AdminPortfolioPrincipalAssociation:
    Type: AWS::ServiceCatalog::PortfolioPrincipalAssociation
    Properties:
      AcceptLanguage: en
      PortfolioId: !Ref 'Portfolio'
      PrincipalARN: !GetAtt 'SnowEndUser.Arn'
      PrincipalType: IAM
  ProdEC2:
    Type: AWS::ServiceCatalog::CloudFormationProduct
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - E3002
    Properties:
      Owner: MP Team
      SupportDescription: Support Description
      Description: EC2 This product launches a linux server.
      Name: !Sub 'EC2 Instance'
      ProvisioningArtifactParameters:
        - Description: Base Version
          Info:
            LoadTemplateFromURL: https://s3.amazonaws.com/marketplace-sa-resources/ec2CFT.json
          Name: !Ref 'ProductVersionName'
      'Fn::Transform':
        Name: 'AWS::Include'
        Parameters:
          Location : "s3://cfn-snippets-bucket-cloudformationsnippetsbucket-elu83sv8ocdz/scipoolprod-sc-lib-infra/support.yaml"
  ProdAssEC2:
    Type: AWS::ServiceCatalog::PortfolioProductAssociation
    DependsOn:
      - Portfolio
      - ProdEC2
    Properties:
      AcceptLanguage: en
      PortfolioId: !Ref 'Portfolio'
      ProductId: !Ref 'ProdEC2'
  LRCEC2:
    Type: AWS::ServiceCatalog::LaunchRoleConstraint
    DependsOn:
      - Portfolio
      - ProdAssEC2
    Properties:
      Description: Launch role associated has permissions to create, manage, and terminate
        an EC2 instance
      AcceptLanguage: en
      PortfolioId: !Ref 'Portfolio'
      ProductId: !Ref 'ProdEC2'
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${SCEC2ConnectLaunchRole}'
  LabTagoption:
    DependsOn: Portfolio
    Type: AWS::ServiceCatalog::TagOption
    Properties:
      Active: 'True'
      Value: '1001'
      Key: cost-center
  TagAssoPort:
    DependsOn: LabTagoption
    Type: AWS::ServiceCatalog::TagOptionAssociation
    Properties:
      TagOptionId: !Ref 'LabTagoption'
      ResourceId: !Ref 'Portfolio'
  SCSyncUser:
    Type: AWS::IAM::User
    Properties:
      UserName: MySCSyncUser
      Policies:
        - PolicyName: SCConnectorAdmin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SCConnectorAdminSID
                Effect: Allow
                Action:
                  - servicecatalog:DisassociateProductFromPortfolio
                  - servicecatalog:DeleteProduct
                  - servicecatalog:DisassociateTagOptionFromResource
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ServiceCatalogAdminReadOnlyAccess
      LoginProfile:
        Password: !Ref 'PWD'
        PasswordResetRequired: true
  SCSyncUserAccessKeys:
    DependsOn: SCSyncUser
    Type: AWS::IAM::AccessKey
    Properties:
      Status: Active
      UserName: MySCSyncUser
  ServiceCatalogServiceNowAdditionalPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - servicecatalog:ListProvisioningArtifacts
            Resource: '*'
      PolicyName: ServiceCatalogServiceNowAdditionalPermissions
      Roles:
        - !Ref 'SnowEndUser'
  SnowEndUser:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SnowEndUser
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSServiceCatalogEndUserFullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - sts:AssumeRole
  SCEndUser:
    Type: AWS::IAM::User
    Properties:
      UserName: SCEndUser
      LoginProfile:
        Password: !Ref 'PWD'
        PasswordResetRequired: true
  SCEndUserAccessKeys:
    DependsOn: SCEndUser
    Type: AWS::IAM::AccessKey
    Properties:
      Status: Active
      UserName: SCEndUser
  StsAssumeSC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: !GetAtt 'SnowEndUser.Arn'
      PolicyName: StsAssumeSC
      Users:
        - !Ref 'SCEndUser'
  SCEC2ConnectLaunchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SCEC2ConnectLaunchRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - servicecatalog.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3LaunchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: S3LaunchPolicySID
                Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - cloudformation:GetTemplate
                  - cloudformation:List*
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStacks
                  - cloudformation:GetTemplateSummary
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - servicecatalog:ListServiceActionsForProvisioningArtifact
                  - servicecatalog:ExecuteprovisionedProductServiceAction
                  - ssm:DescribeDocument
                  - ssm:GetAutomationExecution
                  - ssm:StartAutomationExecution
                  - ssm:StopAutomationExecution
                  - cloudformation:ListStackResources
                  - s3:GetObject
                Resource: '*'
  EndUser:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSServiceCatalogEndUserFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              AWS: !Sub '${AWS::AccountId}'
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ServiceActionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: S3LaunchPolicySID
                Effect: Allow
                Action:
                  - servicecatalog:ListServiceActionsForProvisioningArtifact
                  - servicecatalog:ExecuteprovisionedProductServiceAction
                  - ssm:DescribeDocument
                  - ssm:GetAutomationExecution
                  - ssm:StartAutomationExecution
                  - ssm:StopAutomationExecution
                  - cloudformation:ListStackResources
                Resource: '*'
      RoleName: service_catalog_end_user
  servicecatalogawsstudent:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSServiceCatalogEndUserFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              AWS: !Sub '${AWS::AccountId}'
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ServiceActionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - config:StartConfigurationRecorder
                  - events:PutTargets
                  - config:PutConfigurationRecorder
                  - config:PutDeliveryChannel
                  - config:Get*
                  - iam:GetPolicyVersion
                  - iam:List*
                  - ec2:CreateTags
                  - ec2:CreateSecurityGroup
                  - events:PutRule
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - config:PutEvaluations
                  - logs:Describe*
                  - logs:*
                  - s3:Get*
                  - s3:PutBucketLogging
                  - s3:PutBucketLifecycle
                  - s3:PutBucketAcl
                  - events:Test*
                  - cloudfront:Get*
                  - s3:List*
                  - workdocs:RegisterDirectory
                  - config:Describe*
                  - resource-groups:List*
                  - logs:FilterLogEvents
                  - autoscaling-plans:Describe*
                  - config:Deliver*
                  - cloudfront:List*
                  - ec2:Get*
                  - xray:Get*
                  - sns:*
                  - iam:GetRole
                  - iam:GetPolicy
                  - lambda:List*
                  - logs:Get*
                  - resource-groups:Search*
                  - cloudwatch:*
                  - servicecatalog:Describe*
                  - workspaces:*
                  - servicecatalog:Search*
                  - ssm:List*
                  - events:List*
                  - servicecatalog:List*
                  - logs:ListTagsLogGroup
                  - workdocs:DeregisterDirectory
                  - autoscaling:Describe*
                  - events:Describe*
                  - iam:Generate*
                  - tag:Get*
                  - ds:*
                  - iam:PassRole
                  - iam:Get*
                  - resource-groups:Describe*
                  - kms:DescribeKey
                  - servicecatalog:Scan*
                  - application-autoscaling:Describe*
                  - ssm:Get*
                  - wam:*
                  - xray:BatchGet*
                  - lambda:Get*
                  - logs:TestMetricFilter
                  - iam:Simulate*
                  - ec2messages:Get*
                  - kms:ListKeys
                  - ec2:Describe*
                  - config:List*
                  - s3:Head*
                  - sts:Get*
                  - kms:ListAliases
                  - ssm:Describe*
                  - resource-groups:Get*
                Resource: '*'
              - Sid: test
                Effect: Allow
                Resource: '*'
                Action: sts:AssumeRole
              - Sid: putrolePolicy
                Effect: Allow
                Action: iam:PutRolePolicy
                Resource: arn:aws:iam::*:role/workspaces_DefaultRole
      RoleName: service_catalog_awsstudent
  Admin:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSServiceCatalogAdminFullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              AWS: !Sub '${AWS::AccountId}'
            Action: sts:AssumeRole
      RoleName: service_catalog_administrator
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: SNOW-SC-Workshop
  subnetPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref 'VPC'
      Tags:
        - Key: subnet-type
          Value: private
        - Key: Name
          Value: SNOW-SC-Workshop-private
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap
        - AMI
        - !Ref 'AWS::Region'
        - HVM64
      SubnetId: !Ref 'subnetPrivate'
  subnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !FindInMap
        - SubnetAZ1
        - !Ref 'AWS::Region'
        - HVM64
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref 'VPC'
      Tags:
        - Key: subnet-type
          Value: public
        - Key: Name
          Value: SNOW-SC-Workshop-public
  subnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !FindInMap
        - SubnetAZ2
        - !Ref 'AWS::Region'
        - HVM64
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref 'VPC'
      Tags:
        - Key: subnet-type
          Value: public
        - Key: Name
          Value: SNOW-SC-Workshop-public
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  PublicVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: PublicVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'subnetPublic1'
      RouteTableId: !Ref 'PublicRouteTable'
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'subnetPublic2'
      RouteTableId: !Ref 'PublicRouteTable'
  MySimpleAD:
    Type: AWS::DirectoryService::SimpleAD
    Properties:
      Name: mt.servicecatalog.com
      Password: !Ref 'PWD'
      Size: Small
      VpcSettings:
        SubnetIds:
          - !Ref 'subnetPublic1'
          - !Ref 'subnetPublic2'
        VpcId: !Ref 'VPC'
  NATAttachment1:
    DependsOn: PublicVPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP1.AllocationId'
      SubnetId: !Ref 'subnetPublic1'
  NATAttachment2:
    DependsOn: PublicVPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP2.AllocationId'
      SubnetId: !Ref 'subnetPublic2'
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: PublicVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATAttachment1'
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'subnetPrivate'
      RouteTableId: !Ref 'PrivateRouteTable'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: InstanceSecurityGroup
      GroupDescription: Allow http to client host
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: SNOW-SC-Workshop
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  ConfigBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'ConfigBucket'
      PolicyDocument:
        Statement:
          - Sid: AWSConfigBucketPermissionsCheck
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub 'arn:aws:s3:::${ConfigBucket}'
          - Sid: ' AWSConfigBucketDelivery'
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${ConfigBucket}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
  ConfigPermissionToCallLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'CheckIfInstanceIsNotOfTypeT2Micro.Arn'
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  CheckIfInstanceIsNotOfTypeT2Micro:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          'use strict';
          const aws = require('aws-sdk');
          const config = new aws.ConfigService();
          function check(reference, referenceName) {
              if (!reference) { throw new Error('Error: ${!referenceName} is not defined');}
              return reference;
          }
          function isOverSized(messageType) {
              check(messageType, 'messageType');
              return messageType === 'OversizedConfigurationItemChangeNotification';
          }
          function getConfiguration(resourceType, resourceId, captureTime, callback) {
              config.getResourceConfigHistory({ resourceType, resourceId, laterTime: new Date(captureTime), limit: 1 }, (err, data) => {
                  if (err) {callback(err, null);}
                  const cfgItem = data.configurationItems[0];
                  callback(null, cfgItem);
              });}
          function convertApiConfiguration(apiCFG) {
              apiCFG.awsAccountId = apiCFG.accountId;
              apiCFG.ARN = apiCFG.arn;
              apiCFG.configurationStateMd5Hash = apiCFG.configurationItemMD5Hash;
              apiCFG.configurationItemVersion = apiCFG.version;
              apiCFG.configuration = JSON.parse(apiCFG.configuration);
              if ({}.hasOwnProperty.call(apiCFG, 'relationships')) {
                  for (let i = 0; i < apiCFG.relationships.length; i++) {
                      apiCFG.relationships[i].name = apiCFG.relationships[i].relationshipName;
                  }}
              return apiCFG;
          }
          function getConfigurationItem(invokingEvent, callback) {
              check(invokingEvent, 'invokingEvent');
              if (isOverSized(invokingEvent.messageType)) {
                  const configurationItemSummary = check(invokingEvent.configurationItemSummary, 'configurationItemSummary');
                  getConfiguration(configurationItemSummary.resourceType, configurationItemSummary.resourceId, configurationItemSummary.configurationItemCaptureTime, (err, apiConfigurationItem) => {
                      if (err) {callback(err);}
                      const configurationItem = convertApiConfiguration(apiConfigurationItem);
                      callback(null, configurationItem);
                  });} else {
                  check(invokingEvent.configurationItem, 'configurationItem');
                  callback(null, invokingEvent.configurationItem);
              }
          }
          function isApplicable(cfgItem, event) {
              check(cfgItem, 'configurationItem');
              check(event, 'event');
              const status = cfgItem.configurationItemStatus;
              const eventLeftScope = event.eventLeftScope;
              return (status === 'OK' || status === 'ResourceDiscovered') && eventLeftScope === false;
          }
          function checkCompliance(cfgItem) {
              check(cfgItem, 'configurationItem');
              check(cfgItem.configuration, 'configurationItem.configuration');
              if (cfgItem.resourceType !== 'AWS::EC2::Instance') {return 'NOT_APPLICABLE';} else if (cfgItem.configuration.instanceType == 't2.micro') {return 'COMPLIANT';}
              return 'NON_COMPLIANT';
          }
          exports.handler = (event, context, callback) => {
              check(event, 'event');
              const invokingEvent = JSON.parse(event.invokingEvent);
                  getConfigurationItem(invokingEvent, (err, cfgItem) => {
                  if (err) {callback(err);}
                  let compliance = 'NOT_APPLICABLE';
                  const putEvaluationsRequest = {};
                  if (isApplicable(cfgItem, event)) {compliance = checkCompliance(cfgItem);}
                  putEvaluationsRequest.Evaluations = [{ComplianceResourceType: cfgItem.resourceType,ComplianceResourceId: cfgItem.resourceId,ComplianceType: compliance,OrderingTimestamp: cfgItem.configurationItemCaptureTime,},];
                  putEvaluationsRequest.ResultToken = event.resultToken;
                  config.putEvaluations(putEvaluationsRequest, (error, data) => {
                      if (error) { callback(error, null);}
                      else if (data.FailedEvaluations.length > 0) {callback(JSON.stringify(data), null);}
                      else {callback(null, data);}
                          });})}
      Handler: index.handler
      Runtime: nodejs8.10
      Timeout: 30
      Role: !GetAtt 'LambdaExecutionRole.Arn'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  ConfigRuleForCheckIfInstanceIsNotOfTypeT2MicroVerification:
    Type: AWS::Config::ConfigRule
    Description: This Config rule checks whether all instances are created from golden
      AMI
    Properties:
      ConfigRuleName: ConfigRuleForCheckIfInstanceIsNotOfTypeT2MicroVerification
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
          - EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification
          - EventSource: aws.config
            MessageType: ScheduledNotification
            MaximumExecutionFrequency: One_Hour
        SourceIdentifier: !GetAtt 'CheckIfInstanceIsNotOfTypeT2Micro.Arn'
    DependsOn: ConfigPermissionToCallLambda
  ConfigServiceRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: config.amazonaws.com
      Description: Service linked role for AWS Config
Outputs:
  ScheduledRule:
    Description: ScheduledRule
    Value: !Ref 'ScheduledRule'
  T2MicroConfigRuleTopic:
    Description: T2MicroConfigRuleTopic
    Value: !Ref 'T2MicroConfigRuleTopic'
  SwitchRoleSCAdmin:
    Value: !Sub 'https://signin.aws.amazon.com/switchrole?account=${AWS::AccountId}&roleName=service_catalog_administrator&displayName=Admin'
  SwitchRoleAwsStudent:
    Value: !Sub 'https://signin.aws.amazon.com/switchrole?account=${AWS::AccountId}&roleName=service_catalog_awsstudent&displayName=Student'
  SwitchRoleSCEndUser:
    Value: !Sub 'https://signin.aws.amazon.com/switchrole?account=${AWS::AccountId}&roleName=service_catalog_end_user&displayName=EndUser'
  MySimpleAD:
    Description: Directory details
    Value: !Ref 'MySimpleAD'
  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref 'subnetPublic1'
  SecurityGroup:
    Value: !Ref 'InstanceSecurityGroup'
  ConfigBucket:
    Description: Name of the S3 bucket
    Value: !Ref 'ConfigBucket'
  ConfigServiceRole:
    Value: !Ref 'ConfigServiceRole'
  SCSyncUserAccessKey:
    Value: !Ref 'SCSyncUserAccessKeys'
  SCSyncUserSAK:
    Value: !GetAtt 'SCSyncUserAccessKeys.SecretAccessKey'
  SnowEndUser:
    Value: !GetAtt 'SnowEndUser.Arn'
  SCEndUserAccessKey:
    Value: !Ref 'SCEndUserAccessKeys'
  SCEndUserSAK:
    Value: !GetAtt 'SCEndUserAccessKeys.SecretAccessKey'
  SCEC2ConnectLaunchRole:
    Value: !GetAtt 'SCEC2ConnectLaunchRole.Arn'
  Region:
    Value: !FindInMap
      - RegionValue
      - !Ref 'AWS::Region'
      - name
  AMI:
    Value: !FindInMap
      - AMI
      - !Ref 'AWS::Region'
      - HVM64
